operation:"-","accSub",left:Member(MemberExpr { span: 434260..434298, obj: Paren(ParenExpr { span: 434260..434291, expr: Bin(BinExpr { span: 434261..434290, op: "||", left: Member(MemberExpr { span: 434261..434284, obj: Call(CallExpr { span: 434261..434281, ctxt: #0, callee: Expr(Member(MemberExpr { span: 434261..434276, obj: Member(MemberExpr { span: 434261..434270, obj: Ident(Ident { span: 434261..434267, ctxt: #5, sym: "eSplit", optional: false }), prop: Computed(ComputedPropName { span: 434267..434270, expr: Lit(Num(Number { span: 434268..434269, value: 0.0, raw: Some("0") })) }) }), prop: Ident(IdentName { span: 434271..434276, sym: "split" }) })), args: [ExprOrSpread { spread: None, expr: Lit(Str(Str { span: 434277..434280, value: ".", raw: Some("'.'") })) }], type_args: None }), prop: Computed(ComputedPropName { span: 434281..434284, expr: Lit(Num(Number { span: 434282..434283, value: 1.0, raw: Some("1") })) }) }), right: Lit(Str(Str { span: 434288..434290, value: "", raw: Some("''") })) }) }), prop: Ident(IdentName { span: 434292..434298, sym: "length" }) }),right:Paren(ParenExpr { span: 434301..434320, expr: Unary(UnaryExpr { span: 434302..434319, op: "+", arg: Paren(ParenExpr { span: 434303..434319, expr: Bin(BinExpr { span: 434304..434318, op: "||", left: Member(MemberExpr { span: 434304..434313, obj: Ident(Ident { span: 434304..434310, ctxt: #5, sym: "eSplit", optional: false }), prop: Computed(ComputedPropName { span: 434310..434313, expr: Lit(Num(Number { span: 434311..434312, value: 1.0, raw: Some("1") })) }) }), right: Lit(Num(Number { span: 434317..434318, value: 0.0, raw: Some("0") })) }) }) }) })
start:434260,end:434320
operation:"*","accMul",left:Ident(Ident { span: 434703..434706, ctxt: #6, sym: "num", optional: false }),right:Paren(ParenExpr { span: 434709..434721, expr: Bin(BinExpr { span: 434710..434720, op: "**", left: Lit(Num(Number { span: 434710..434712, value: 10.0, raw: Some("10") })), right: Ident(Ident { span: 434716..434720, ctxt: #6, sym: "dLen", optional: false }) }) })
start:434703,end:434721
operation:"-","accSub",left:Ident(Ident { span: 435236..435237, ctxt: #12, sym: "i", optional: false }),right:Lit(Num(Number { span: 435240..435241, value: 2.0, raw: Some("2") }))
start:435236,end:435241
operation:"+","accAdd",left:Call(CallExpr { span: 435487..435504, ctxt: #0, callee: Expr(Ident(Ident { span: 435487..435498, ctxt: #2, sym: "digitLength", optional: false })), args: [ExprOrSpread { spread: None, expr: Ident(Ident { span: 435499..435503, ctxt: #10, sym: "num1", optional: false }) }], type_args: None }),right:Call(CallExpr { span: 435507..435524, ctxt: #0, callee: Expr(Ident(Ident { span: 435507..435518, ctxt: #2, sym: "digitLength", optional: false })), args: [ExprOrSpread { spread: None, expr: Ident(Ident { span: 435519..435523, ctxt: #10, sym: "num2", optional: false }) }], type_args: None })
start:435487,end:435524
operation:"*","accMul",left:Ident(Ident { span: 435548..435559, ctxt: #10, sym: "num1Changed", optional: false }),right:Ident(Ident { span: 435562..435573, ctxt: #10, sym: "num2Changed", optional: false })
start:435548,end:435573
operation:"/","accDiv",left:Ident(Ident { span: 435616..435625, ctxt: #10, sym: "leftValue", optional: false }),right:Paren(ParenExpr { span: 435628..435643, expr: Bin(BinExpr { span: 435629..435642, op: "**", left: Lit(Num(Number { span: 435629..435631, value: 10.0, raw: Some("10") })), right: Ident(Ident { span: 435635..435642, ctxt: #10, sym: "baseNum", optional: false }) }) })
start:435616,end:435643
operation:"-","accSub",left:Ident(Ident { span: 435833..435834, ctxt: #17, sym: "i", optional: false }),right:Lit(Num(Number { span: 435837..435838, value: 2.0, raw: Some("2") }))
start:435833,end:435838
operation:"+","accAdd",left:Call(CallExpr { span: 436062..436082, ctxt: #0, callee: Expr(Ident(Ident { span: 436062..436067, ctxt: #2, sym: "times", optional: false })), args: [ExprOrSpread { spread: None, expr: Ident(Ident { span: 436068..436072, ctxt: #15, sym: "num1", optional: false }) }, ExprOrSpread { spread: None, expr: Ident(Ident { span: 436074..436081, ctxt: #15, sym: "baseNum", optional: false }) }], type_args: None }),right:Call(CallExpr { span: 436085..436105, ctxt: #0, callee: Expr(Ident(Ident { span: 436085..436090, ctxt: #2, sym: "times", optional: false })), args: [ExprOrSpread { spread: None, expr: Ident(Ident { span: 436091..436095, ctxt: #15, sym: "num2", optional: false }) }, ExprOrSpread { spread: None, expr: Ident(Ident { span: 436097..436104, ctxt: #15, sym: "baseNum", optional: false }) }], type_args: None })
start:436062,end:436105
operation:"/","accDiv",left:Paren(ParenExpr { span: 436061..436106, expr: Call(CallExpr { span: 0..0, ctxt: #0, callee: Expr(Ident(Ident { span: 0..0, ctxt: #0, sym: "accAdd", optional: false })), args: [ExprOrSpread { spread: None, expr: Call(CallExpr { span: 436062..436082, ctxt: #0, callee: Expr(Ident(Ident { span: 436062..436067, ctxt: #2, sym: "times", optional: false })), args: [ExprOrSpread { spread: None, expr: Ident(Ident { span: 436068..436072, ctxt: #15, sym: "num1", optional: false }) }, ExprOrSpread { spread: None, expr: Ident(Ident { span: 436074..436081, ctxt: #15, sym: "baseNum", optional: false }) }], type_args: None }) }, ExprOrSpread { spread: None, expr: Call(CallExpr { span: 436085..436105, ctxt: #0, callee: Expr(Ident(Ident { span: 436085..436090, ctxt: #2, sym: "times", optional: false })), args: [ExprOrSpread { spread: None, expr: Ident(Ident { span: 436091..436095, ctxt: #15, sym: "num2", optional: false }) }, ExprOrSpread { spread: None, expr: Ident(Ident { span: 436097..436104, ctxt: #15, sym: "baseNum", optional: false }) }], type_args: None }) }], type_args: None }) }),right:Ident(Ident { span: 436109..436116, ctxt: #15, sym: "baseNum", optional: false })
start:436061,end:436116
operation:"-","accSub",left:Ident(Ident { span: 436307..436308, ctxt: #22, sym: "i", optional: false }),right:Lit(Num(Number { span: 436311..436312, value: 2.0, raw: Some("2") }))
start:436307,end:436312
operation:"-","accSub",left:Call(CallExpr { span: 436538..436558, ctxt: #0, callee: Expr(Ident(Ident { span: 436538..436543, ctxt: #2, sym: "times", optional: false })), args: [ExprOrSpread { spread: None, expr: Ident(Ident { span: 436544..436548, ctxt: #20, sym: "num1", optional: false }) }, ExprOrSpread { spread: None, expr: Ident(Ident { span: 436550..436557, ctxt: #20, sym: "baseNum", optional: false }) }], type_args: None }),right:Call(CallExpr { span: 436561..436581, ctxt: #0, callee: Expr(Ident(Ident { span: 436561..436566, ctxt: #2, sym: "times", optional: false })), args: [ExprOrSpread { spread: None, expr: Ident(Ident { span: 436567..436571, ctxt: #20, sym: "num2", optional: false }) }, ExprOrSpread { spread: None, expr: Ident(Ident { span: 436573..436580, ctxt: #20, sym: "baseNum", optional: false }) }], type_args: None })
start:436538,end:436581
operation:"/","accDiv",left:Paren(ParenExpr { span: 436537..436582, expr: Call(CallExpr { span: 0..0, ctxt: #0, callee: Expr(Ident(Ident { span: 0..0, ctxt: #0, sym: "accSub", optional: false })), args: [ExprOrSpread { spread: None, expr: Call(CallExpr { span: 436538..436558, ctxt: #0, callee: Expr(Ident(Ident { span: 436538..436543, ctxt: #2, sym: "times", optional: false })), args: [ExprOrSpread { spread: None, expr: Ident(Ident { span: 436544..436548, ctxt: #20, sym: "num1", optional: false }) }, ExprOrSpread { spread: None, expr: Ident(Ident { span: 436550..436557, ctxt: #20, sym: "baseNum", optional: false }) }], type_args: None }) }, ExprOrSpread { spread: None, expr: Call(CallExpr { span: 436561..436581, ctxt: #0, callee: Expr(Ident(Ident { span: 436561..436566, ctxt: #2, sym: "times", optional: false })), args: [ExprOrSpread { spread: None, expr: Ident(Ident { span: 436567..436571, ctxt: #20, sym: "num2", optional: false }) }, ExprOrSpread { spread: None, expr: Ident(Ident { span: 436573..436580, ctxt: #20, sym: "baseNum", optional: false }) }], type_args: None }) }], type_args: None }) }),right:Ident(Ident { span: 436585..436592, ctxt: #20, sym: "baseNum", optional: false })
start:436537,end:436592
operation:"-","accSub",left:Ident(Ident { span: 436784..436785, ctxt: #27, sym: "i", optional: false }),right:Lit(Num(Number { span: 436788..436789, value: 2.0, raw: Some("2") }))
start:436784,end:436789